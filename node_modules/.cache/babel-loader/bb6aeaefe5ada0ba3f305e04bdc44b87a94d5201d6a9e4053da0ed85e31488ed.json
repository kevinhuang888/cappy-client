{"ast":null,"code":"//APIs\nexport async function getCategories() {\n  try {\n    const response = await fetch(`http://localhost:5002/category/`);\n    if (!response.ok) {\n      throw new Error(`Response status: ${response.status}`);\n    }\n    const categories = await response.json();\n    return categories;\n  } catch (err) {\n    console.error(err.message);\n  }\n}\nexport async function postCategory(newCategory) {\n  try {\n    const response = await fetch(`http://localhost:5002/category/`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json' // Ensure the body is sent as JSON\n      },\n      body: JSON.stringify(newCategory)\n    });\n    if (!response.ok) {\n      throw new Error(`postCategoryResponse status: ${response.status}`);\n    }\n    const category = await response.json();\n    console.log(`New Category created: ${category}`);\n    return category;\n  } catch (err) {\n    console.error(err.message);\n  }\n}\nexport async function putCategory(newCategory) {\n  try {\n    const response = await fetch(`http://localhost:5002/category/${newCategory._id}`, {\n      method: \"PUT\",\n      headers: {\n        'Content-Type': 'application/json' // Ensure the body is sent as JSON\n      },\n      body: JSON.stringify(newCategory)\n    });\n    if (!response.ok) {\n      throw new Error(`putCategoryResponse status: ${response.status}`);\n    }\n    const category = await response.json();\n    console.log(`Category: ${JSON.stringify(category.name)} Updated`);\n    return category;\n  } catch (err) {\n    console.error(err.message);\n  }\n}\nexport async function postGoal(newGoal) {\n  try {\n    const response = await fetch(`http://localhost:5002/goal/`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json' // Ensure the body is sent as JSON\n      },\n      body: JSON.stringify(newGoal)\n    });\n    if (!response.ok) {\n      throw new Error(`postGoal status: ${response.status}`);\n    }\n    const goal = await response.json();\n    console.log(`New Goal created: ${goal}`);\n    return goal;\n  } catch (err) {\n    console.error(err.message);\n  }\n}\nexport async function getGoalById(goalId) {\n  try {\n    const response = await fetch(`http://localhost:5002/goal/${goalId}`);\n    if (!response.ok) {\n      throw new Error(`Response status: ${response.status}`);\n    }\n    const goal = await response.json();\n    console.log(`[getGoalById] Id: ${goalId}, Data: ${JSON.stringify(goal)}`);\n    return goal;\n  } catch (err) {\n    console.error(err.message);\n  }\n}","map":{"version":3,"names":["getCategories","response","fetch","ok","Error","status","categories","json","err","console","error","message","postCategory","newCategory","method","headers","body","JSON","stringify","category","log","putCategory","_id","name","postGoal","newGoal","goal","getGoalById","goalId"],"sources":["/Users/kevinhuang/Desktop/csprojects/cappy/client/src/components/goals/GoalsApi.jsx"],"sourcesContent":["  //APIs\n  export async function getCategories() {\n    try{\n      const response = await fetch(`http://localhost:5002/category/`)\n      if(!response.ok){\n        throw new Error(`Response status: ${response.status}`)\n      }\n      const categories = await response.json()\n      return categories\n    } catch(err){\n      console.error(err.message)\n    }\n  }\n\n  export async function postCategory(newCategory) {\n    try{\n      const response = await fetch(`http://localhost:5002/category/`,{\n        method:\"POST\",\n        headers: {\n          'Content-Type': 'application/json', // Ensure the body is sent as JSON\n        },\n        body: JSON.stringify(newCategory)\n      })\n      if(!response.ok){\n        throw new Error(`postCategoryResponse status: ${response.status}`)\n      }\n      const category = await response.json()\n      console.log(`New Category created: ${category}`)\n      return category\n\n    } catch(err){\n      console.error(err.message)\n    }\n  }\n\n  export async function putCategory(newCategory) {\n    try{\n      const response = await fetch(`http://localhost:5002/category/${newCategory._id}`,{\n        method:\"PUT\",\n        headers: {\n          'Content-Type': 'application/json', // Ensure the body is sent as JSON\n        },\n        body: JSON.stringify(newCategory)\n      })\n      if(!response.ok){\n        throw new Error(`putCategoryResponse status: ${response.status}`)\n      }\n      const category = await response.json()\n      console.log(`Category: ${JSON.stringify(category.name)} Updated`)\n      return category\n\n    } catch(err){\n      console.error(err.message)\n    }\n  }\n\n  export async function postGoal(newGoal) {\n    try{\n      const response = await fetch(`http://localhost:5002/goal/`,{\n        method:\"POST\",\n        headers: {\n          'Content-Type': 'application/json', // Ensure the body is sent as JSON\n        },\n        body: JSON.stringify(newGoal)\n      })\n      if(!response.ok){\n        throw new Error(`postGoal status: ${response.status}`)\n      }\n      const goal = await response.json()\n      console.log(`New Goal created: ${goal}`)\n      return goal\n\n    } catch(err){\n      console.error(err.message)\n    }\n  }\n\n  export async function getGoalById(goalId) {\n    try{\n      const response = await fetch(`http://localhost:5002/goal/${goalId}`)\n      if(!response.ok){\n        throw new Error(`Response status: ${response.status}`)\n      }\n      const goal = await response.json()\n      console.log(`[getGoalById] Id: ${goalId}, Data: ${JSON.stringify(goal)}`)\n      return goal\n    } catch(err){\n      console.error(err.message)\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}